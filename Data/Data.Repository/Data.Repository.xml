<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Data.Repository</name>
    </assembly>
    <members>
        <member name="T:Data.Repository.Implementation.BaseRepository`2">
            <summary>
            The base implementation of repository.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="F:Data.Repository.Implementation.BaseRepository`2.context">
            <summary>
            The context
            </summary>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.#ctor(Data.DataBaseContext.FootballContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Data.Repository.Implementation.BaseRepository`2"/> class.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.CreateAsync(`0)">
            <summary>
            Creates the specified entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            Created entity
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.DeleteAsync(`1)">
            <summary>
            Deletes the specified entity asynchronously.
            </summary>
            <param name="key">The entity key.</param>
            <returns>
            true if entity has been successfully deleted, otherwize false.
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes the specified entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            true if entity has been successfully deleted, otherwize false.
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.GetAllAsync">
            <summary>
            Gets the entities asynchronously.
            </summary>
            <returns>
            The list of entities.
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.GetAllAsync(System.Func{`0,System.Boolean})">
            <summary>
            Gets all asynchronous.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The list of entities.</returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.GetAsync(`1)">
            <summary>
            Gets the entity by the specified key asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>
            Found entity
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.BaseRepository`2.UpdateAsync(`0)">
            <summary>
            Updates the specified key asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            Updated entity
            </returns>
        </member>
        <member name="T:Data.Repository.Implementation.PlayerActivationRepository">
            <summary>
            Activation repository.
            </summary>
        </member>
        <member name="M:Data.Repository.Implementation.PlayerActivationRepository.#ctor(Data.DataBaseContext.FootballContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Data.Repository.Implementation.PlayerActivationRepository"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Data.Repository.Implementation.PlayerRepository">
            <summary>
            The players repository
            </summary>
        </member>
        <member name="M:Data.Repository.Implementation.PlayerRepository.#ctor(Data.DataBaseContext.FootballContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Data.Repository.Implementation.PlayerRepository"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Data.Repository.Implementation.PlayerRepository.GetPlayerByAlias(System.String)">
            <summary>
            Gets the player by alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>
            The player.
            </returns>
        </member>
        <member name="M:Data.Repository.Implementation.PlayerRepository.IsExist(System.String,System.String)">
            <summary>
            Determines whether the specified alias is unique.
            </summary>
            <param name="alias">The alias.</param>
            <param name="email">The email.</param>
            <returns>
            Is unique alias and email.
            </returns>
        </member>
        <member name="T:Data.Repository.Interfaces.IPlayerActivationRepository">
            <summary>
            Activation repository
            </summary>
        </member>
        <member name="T:Data.Repository.Interfaces.IPlayerRepository">
            <summary>
            The player repository.
            </summary>
        </member>
        <member name="M:Data.Repository.Interfaces.IPlayerRepository.GetPlayerByAlias(System.String)">
            <summary>
            Gets the player by alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>The player.</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IPlayerRepository.IsExist(System.String,System.String)">
            <summary>
            Determines whether the specified alias is unique.
            </summary>
            <param name="alias">The alias.</param>
            <param name="email">The email.</param>
            <returns>Is unique alias and email.</returns>
        </member>
        <member name="T:Data.Repository.Interfaces.IRepository`2">
            <summary>
            Base repository interface.
            </summary>
            <typeparam name="T">The type of entity.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.GetAsync(`1)">
            <summary>
            Gets the entity by the specified key asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>Found entity</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.GetAllAsync">
            <summary>
            Gets the entities asynchronously.
            </summary>
            <returns>The list of entities.</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.GetAllAsync(System.Func{`0,System.Boolean})">
            <summary>
            Gets all asynchronous.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.CreateAsync(`0)">
            <summary>
            Creates the specified entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>Created entity</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.UpdateAsync(`0)">
            <summary>
            Updates the specified key asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>Updated entity</returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.DeleteAsync(`1)">
            <summary>
            Deletes the specified entity asynchronously.
            </summary>
            <param name="key">The entity key.</param>
            <returns>
            true if entity has been successfully deleted, otherwize false.
            </returns>
        </member>
        <member name="M:Data.Repository.Interfaces.IRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes the specified entity asynchronously.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            true if entity has been successfully deleted, otherwize false.
            </returns>
        </member>
    </members>
</doc>
